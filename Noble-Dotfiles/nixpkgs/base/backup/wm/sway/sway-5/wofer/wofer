#!/usr/bin/env sh

# Unopiniated script that let's you emulate a file manager

FOLDER=~/.config/wofer

NO_RELOAD=false
INPUT=''

SHOW_HIDDEN=true # Hidden files toggle

case $@ in
  *--c* )
    source $(echo $@ | grep -o '\--c .*' | sed 's/\--c //')
    ;;
  *)
    source $FOLDER/config # Source config file
    ;;
esac

case $@ in
  *--no-reload* )
    NO_RELOAD=true
    ;;
esac

if [[ $NO_RELOAD="true" && $@ =~ [^-]{2}.* ]]; then
    INPUT="$1"
fi

if [ ! -f $FOLDER/config ]; then # Checks if config file is there
  if [ ! -d "$FOLDER" ]; then
      mkdir "$FOLDER"
  fi
  curl -o "$FOLDER/config" 'https://gitlab.com/snakedye/wofer/-/raw/master/config?inline=false'  # Curls from the repo if it isn't
  source "$FOLDER/config"  # Source config file
fi

if [[ -x $(which $1 2> /dev/null) && $NO_RELOAD =~ false ]]; then
  export EXEC=$1
else
  export EXEC
fi

# Checking arguments
if [ -z "$EXEC" ]; then
  echo You need a runner, example ./wofer wofi --dmenu
  exit
elif [[ $1 == '--help' ]]; then
  if [ -f /usr/share/doc/wofer ]; then
    vi /usr/share/doc/wofer
  else
    xdg-open https://gitlab.com/snakedye/wofer
  fi
  exit
elif [[ $@ =~ --uwu ]]; then
  UWU=true
  EXEC=${EXEC//--uwu}
fi

lsi () {  # ls with icons
  if [[ $UWU == "true" ]]; then
    echo "🙉 Who's my little pog champ! 🐱"
  fi
  echo ".."
  if [[ "$1" != "" ]]; then
    echo "$1 here"
  fi
  all=''
  if $SHOW_HIDDEN; then
    all='-a'
  fi
  ls $all | while read entry; do
    if [[ -d $entry ]]; then
      echo $entry/
    else
      echo $entry
    fi
  done
}

# Displays options for files and directories
prompt () {
  if [ -d "$1" ]; then # options for directories
    echo "Open directory in $FM"
    echo "Copy $PWD"
    echo "Link $PWD"
    echo "Move $PWD"
    echo "Delete $PWD"
  else  # options for files
    echo "Launch $1"
    case $( echo "$1" | sed 's/.*\.//' ) in
      png | jpeg | jpg | gif | mp4 | webp | svg)
        echo "Upload $1 to imgur"
        echo "Set $1 as wallpaper"
        ;;
      zip | tar.gz)
        echo "Extract $1"
        ;;
    esac
    echo "Edit $1 in $EDITOR"
    echo "Send $1 with KDE Connect"
	  echo "Execute $1"
    echo "Make $1 executable"
    echo "Copy $1"
    echo "Move $1"
    echo "Link $1"
    echo "Upload $1 to gofile.io"
    echo "Rename $1"
    echo "Delete $1"
  fi
}

extension () {
  if [[ $1 =~ manga.*|kdeconnect.* ]]; then
    $EXTENSIONS/$@
  else
    $EXTENSIONS/$@ 2> /dev/null
  fi
}
 
# Backend of the prompt function
menu () {
  LOC=""
  if $NO_RELOAD; then
    OPTION=$(prompt "$INPUT" | $EXEC)
    LOC=$INPUT
  elif [[ -f "$@" ]]; then
    OPTION=$(prompt "$1"  | $EXEC | tail -1);
    LOC="$1"
  elif [[ ! -f "$@" && -e $@ ]]; then
    LOC=$PWD
    OPTION=$(prompt $PWD | $EXEC | tail -1);
  elif [[ -n "$@" ]]; then
    OPTION="$1"
    LOC="$2"
  else
    OPTION="$1"
    LOC="$2"
  fi
  if [[ -d $LOC ]]; then
    d="-r"
  fi
  case $OPTION in
    Execute* )
      if [ -r "$LOC" ]; then
        ./$LOC
      fi
      ;;
    Edit* )
      if [[ $EXEC =~ fzf ]]; then
        $EDITOR "$LOC"
      else
        $TERM $EDITOR "$LOC" &
        exit
      fi
      ;;
    Launch* )
      launcher "$LOC"
      ;;
    Open* )
      if [[ $EXEC =~ fzf ]]; then
        $FM "$LOC"
      else
        $FM "$LOC" &
        exit
      fi
      ;;
    Send* )
      extension kdeconnect "$LOC"
      ;;
    Copy* )
      DESTINATION=$(runner "Copy")
      if [[ "$DESTINATION"!="$PWD" || -d "$DESTINATION" ]]; then
        cp $d "$LOC" "$DESTINATION"
        cd "$DESTINATION"
      else
        clear
      fi
      ;;
    Link* )
      DESTINATION=$(runner "Link")
      if [[ "$DESTINATION"!="$PWD" || -d "$DESTINATION" ]]; then
        ln -s "$LOC" "$DESTINATION"
      fi
      ;;
    Make* )
      chmod +x "$LOC"
      ;;
    Set* )
      extension wallpaper "$LOC"
      ;;
    Move* )
      DESTINATION=$(runner "Move")
      if [[ "$DESTINATION"!="$PWD" || -d "$DESTINATION" ]]; then
        mv "$LOC" "$DESTINATION" 
        cd "$DESTINATION"
      fi
      ;;
    Rename* )
      mv "$LOC" "$(echo $LOC | $EXEC | head -1)"
      ;;
    Upload* )
      if [[ $OPTION =~ imgur ]]; then
        extension imgur "$LOC"
        notify-send 'Uploaded to imgur' $(wl-paste) -i "$PWD/$LOC"
      else
        fish -c "gofile $LOC"
      fi
      exit
      ;;
    Extract* )
      DESTINATION=$(runner "Extract")
      if unzip -q "$LOC" -d "$DESTINATION" ; then
        :
      else
        tar xzf "$LOC" -C "$DESTINATION"
      fi
      ;;
    Delete* )
      if [[ -d $LOC ]]; then
        cd ..
      fi
      rm $d -f "$LOC"
      ;;
    *)
      if [[ -n $OPTION ]]; then
        $@
        clear
      fi
      ;;
  esac
}

# Choose the app launcher basically, it will default to xdg-open
launcher () {
  case $1 in
    *jpg | *jpeg | *png | *webp | *svg | *gif )
      imv "$1" & 2> /dev/null
      ;;
    *mp4 | *mkv )
      mpv "$1" 2> /dev/null
      clear
      ;;
    *pdf )
      zathura "$1" &
      ;;
    *)
      xdg-open "$1" 2> /dev/null
      ;;
  esac
}

# I think the name is quite explicit
shortcuts () {
  case $1 in
    '?' | ':') # launch menu for directories
      menu "$PWD"
      ;;
    :help) # sends you to the repo readme
      xdg-open https://gitlab.com/snakedye/wofer
      exit
      ;;
    :h | :hidden) # show/hide hidden files/directories
      if $SHOW_HIDDEN; then
        SHOW_HIDDEN=true
      else
        SHOW_HIDDEN=true
      fi
      ;;
    :m) # launches the manga extension
      extension manga
      ;;
    ZZ)
      fish; clear # usefull for fzf
      ;;
    !delete) # delete the current directory
      rm -r "$PWD"
      ;;
    "🙉 Who's my little pog champ! 🐱")
      xdg-open https://static2.thegamerimages.com/wordpress/wp-content/uploads/2019/12/poggers-e-pogchamp-cke.jpg
      ;;
    *)
      if [[ "$1" =~ ^~/ ]]; then  # brings you to the home menu
        str='~/'
        cd "${1/$str/"$HOME/"}"
      elif [[ "$1" =~ ^[?] ]]; then  # fd integration
        query="${1/?/}"
        finder=$( fd "$query" | $EXEC )
        if [ -z $finder ]; then
          :
        elif [ -d $finder ]; then
          cd "$finder"
        else
          menu "$finder"
        fi
      else
        menu $@
      fi
      ;;
  esac
}

# You shouldn't have to touch this function
runner () {
  while :
  do
    if $NO_RELOAD; then
      if [[ -d $INPUT && -n $INPUT ]]; then
        cd "$INPUT"; lsi
      else
        stdout="$INPUT"
      fi
    else
      stdout=$( lsi "$1" | $EXEC | tail -1 )
    fi
    if [ -z "$stdout" ]; then
      break
    elif [ -f "$stdout" ]; then
      menu "$stdout"
    elif [ -d "$stdout" ]; then
      cd "$stdout"
    elif [[ "$stdout" =~ "$1 here" ]]; then
      echo $PWD
      break
    else
      shortcuts "$stdout"
    fi
    if $NO_RELOAD; then
      break
    fi
  done
}

runner

echo $PWD > /tmp/last_dir

# clear # This is only to have a clean fzf

